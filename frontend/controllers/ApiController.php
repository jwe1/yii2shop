<?php
namespace frontend\controllers;

use backend\models\Article;
use backend\models\Article_Category;
use backend\models\Brand;
use frontend\models\Address;
use frontend\models\Cart;
use frontend\models\Goods;
use frontend\models\Goods_Category;
use frontend\models\Member;
use frontend\models\Order;
use frontend\models\OrderGoods;
use yii\db\Exception;
use yii\helpers\ArrayHelper;
use yii\web\Controller;
use yii\web\Cookie;
use yii\web\Response;
use yii\web\UploadedFile;

//https://www.showdoc.cc/1639083?page_id=15066930    463873431    j....
class ApiController extends Controller{

    public $enableCsrfValidation = false;//1.关闭跨站攻击验证
    public function init()//2.设置返回数据的格式
    {
        \Yii::$app->response->format = Response::FORMAT_JSON;
        parent::init(); // TODO: Change the autogenerated stub
    }

    public function actionGetGoodsByBrand()//3.根据品牌获取商品API
    {
        if($brand_id = \Yii::$app->request->get('brand_id')){
            //分页
            $per_page = \Yii::$app->request->get('per_page',4);
            $per_page = $per_page<3 ? 3 : $per_page;
            $page = \Yii::$app->request->get('per_page',1);
            $page = $page<1 ? 1 :$page;
            $query = Goods::find()->where(['brand_id'=>$brand_id]);
            $count = $query->count();
            $goods = $query->offset($per_page*($page-1))->limit($per_page)->asArray()->all();

            //返回商品信息，分页信息
            return ['total'=>$count,'page'=>$page,'per_page'=>$per_page,'data'=>$goods];
        }
        return ['status'=>-1,'error'=>'参数不正确','data'=>''];
    }

    public function actionRegister()//4.注册API
    {
        if(\Yii::$app->request->isPost){
            $model = new Member();
            $model->scenario = Member::SCENARIO_API_REGISTER;
            $model->username = \Yii::$app->request->post('username');
            $model->password = \Yii::$app->request->post('password');
            $model->email = \Yii::$app->request->post('email');
            $model->tel = \Yii::$app->request->post('tel');
            $model->code = \Yii::$app->request->post('code');
            $model->create_at = time();
            if($model->validate()){
                $model->password_hash = \Yii::$app->security->generatePasswordHash($model->password);
                $model->save(false);
                return ['status'=>1,'error'=>'','data'=>$model];//注册成功
            }else{
                return $model->getErrors();//数据验证失败
            }
        }
        return ['status'=>-1,'error'=>'请使用post请求','data'=>''];
    }

    public function actionLogin()//5.登录API
    {
        if(\Yii::$app->request->isPost){
            $username = \Yii::$app->request->post('username');//李冰冰
            $password = \Yii::$app->request->post('password');//12345678
            if($user = Member::findOne(['username'=>$username])){//验证用户是否存在
                if(\Yii::$app->security->validatePassword($password,$user->password_hash)){//验证密码
                    \Yii::$app->user->login($user);//登录用户
                    $user->last_login_time = time();//最后登录时间
                    $user->last_login_ip = ip2long($_SERVER['REMOTE_ADDR']);//ip地址转为INT
                    $user->save(false);
                    return ['status'=>1,'error'=>'','data'=>$user];
                }else{
                    return ['status'=>-1,'error'=>'用户名或密码不正确','data'=>''];
                }
            }else{
                return ['status'=>-1,'error'=>'用户名不存在','data'=>''];
            }
        }
    }

    public function actionChangePassword()//6.修改密码API
    {
        if(\Yii::$app->request->isPost){
            $old_password = \Yii::$app->request->post('old_password');//旧密码
            $new_password = \Yii::$app->request->post('new_password');//新密码
            $confirm_password = \Yii::$app->request->post('confirm_password');//确认新密码
            $user = Member::findOne(['id'=>\Yii::$app->user->id]);//查找用户
            if(\Yii::$app->security->validatePassword($old_password,$user->password_hash)){//验证旧密码
                if($new_password != $confirm_password){
                    return ['status'=>-1,'error'=>'1','data'=>['res'=>'两次密码不一致']];
                }else{
                    $user->password_hash = \Yii::$app->security->generatePasswordHash($new_password);//新密码赋值
                    $user->updated_at = time();//修改时间
                    $user->save(false);//修改密码保存
                    return ['status'=>1,'error'=>'','data'=>$user];
                }
            }else{
                return ['status'=>-1,'error'=>'1','data'=>['res'=>'旧密码错误']];
            }
        }else{
            return ['status'=>-1,'error'=>1,'data'=>'请使用POST方式'];
        }
    }

    public function actionGetUser()//7.获取当前登录的用户信息
    {
        if(!\Yii::$app->user->isGuest){
            $user = Member::findOne(['id'=>\Yii::$app->user->id]);
            return ['status'=>1,'error'=>'','data'=>$user];
        }else{
            return ['status'=>-1,'error'=>1,'data'=>'用户未登录'];
        }
    }

    public function actionAddAddress()//8.收货地址新增/删除API
    {
        if(\Yii::$app->request->isPost){
            if(\Yii::$app->user->isGuest){//未登录
                return ['status'=>-1,'error'=>1,'data'=>'请先登录'];
            }else{//已经登录
                //判断有没有接受到address_id,有并且数据库有该条数据则修改，否则就添加
                if(\Yii::$app->request->post('address_id') && Address::findOne(['id'=>\Yii::$app->request->post('address_id')])){
                        $address = Address::findOne(['id'=>\Yii::$app->request->post('address_id')]);//修改
                }else{
                    $address = new Address();//新增地址
                }
                $address->name = \Yii::$app->request->post('name');
                $address->province = \Yii::$app->request->post('province');
                $address->city = \Yii::$app->request->post('city');
                $address->area = \Yii::$app->request->post('area');
                $address->detail = \Yii::$app->request->post('detail');
                $address->tel = \Yii::$app->request->post('tel');
                $address->user_id = \Yii::$app->user->id;
                if($address->validate()){
                    $address->save(false);//新增/修改保存
                    return ['status'=>1,'error'=>'','data'=>$address];
                }
            }
        }else{
            return ['status'=>-1,'error'=>1,'data'=>'请使用POST方式'];
        }
    }

    public function actionDelAddress()//9.收货地址删除API
    {
        if(\Yii::$app->request->isGet){
            $address_id = \Yii::$app->request->GET('address_id');//接受id
            $address = Address::findOne(['id'=>$address_id,'user_id'=>\Yii::$app->user->id]);
            if($address){//地址存在
                $address->delete();
                return ['status'=>1,'error'=>'','data'=>['res'=>'删除成功']];
            }else{//地址不存在
                return ['status'=>-1,'error'=>1,'data'=>'地址不存在或已经删除'];
            }
        }else{
            return ['status'=>-1,'error'=>1,'data'=>'请使用GET方式'];
        }
    }

    public function actionAddressList()//10.收货地址列表API
    {
        if(!\Yii::$app->user->isGuest){
            $address = Address::find()->asArray()->where(['user_id'=>\Yii::$app->user->id])->all();
            return ['status'=>1,'error'=>'','data'=>$address];
        }else{
            return ['status'=>-1,'error'=>1,'data'=>'请先登录'];
        }
    }

    public function actionGetGoodsCategory()//11.商品分类查询API
    {
        if(\Yii::$app->request->isGet){
            $parent_id = \Yii::$app->request->get('parent_id');//有值表示查询所有子分类
            $child_id = \Yii::$app->request->get('child_id');//有值表示查询父分类
            if($child_id){//查询父分类
                $child = Goods_Category::findOne(['id'=>$child_id]);//先找到子分类
                $categories = Goods_Category::find()->where(['id'=>$child->parent_id])->all();//查询父分类
            }else {
                if ($parent_id == 0) {//全部分类
                    $categories = Goods_Category::find()->orderBy('tree,lft')->all();//找到所有子分类，
                } else {//全部子分类
                    $categories = Goods_Category::find()->where(['parent_id' => $parent_id])->all();
                }
            }
            return ['status' => 1, 'error' => '', 'data' => $categories];
        }else{
            return ['status'=>-1,'error'=>1,'data'=>'请使用GET方式'];
        }
    }

    public function actionGetGoodsByCategory()//12.根据商品分类ID获取下面所有商品API
    {
        if($goods_category_id = \Yii::$app->request->get('goods_category_id')){
            //每页显示条数
            $per_page = \Yii::$app->request->get('per_page',2);
            //当前第几页
            $page = \Yii::$app->request->get('page',1);
            $page = $page < 1?1:$page;

            $query = Goods::find();

            $cate = Goods_Category::findOne(['id'=>$goods_category_id]);//得到该分类
            if($cate){
                    switch ($cate->depth){
                        case 2;//三级分类
                            $query->andWhere(['goods_category_id'=>$goods_category_id]);
                            break;
                        case 1;//二级分类
                            $ids = ArrayHelper::map($cate->children,'id','id');
                            $query->andWhere(['in','goods_category_id',$ids]);
                            break;
                        case 0;//一级分类,先找二级分类，再找三级分类
                            $ids = ArrayHelper::map($cate->leaves()->asArray()->all(),'id','id');
                            $query->andWhere(['in','goods_category_id',$ids]);
                            break;
                    }
                }
                $total = $query->count();

                $goods = $query->offset($per_page*($page-1))->limit($per_page)->asArray()->all();
                return ['total'=>$total,'page'=>$page,'per_page'=>$per_page,'data'=>$goods];
            }
        return ['status'=>-1,'error'=>'参数不正确','data'=>''];
    }

    public function actionGetArticleCategory()//13.获取文章分类API
    {
        if(\Yii::$app->request->isGet){
            $article_categories = Article_Category::find()->all();
            return ['status'=>1,'error'=>'','data'=>$article_categories];
        }
        return ['status'=>-1,'error'=>1,'data'=>'请使用GET方式'];
    }

    public function actionGetArticleByCategory()//14.根据分类获取文章API
    {
        if(\Yii::$app->request->isGet){
            $category_id = \Yii::$app->request->get('category_id');//获得该文章
            $articles =Article::find()->where(['article_category_id'=>$category_id])->all();
            return ['status'=>1,'error'=>'','data'=>$articles];
        }
        return ['status'=>-1,'error'=>1,'data'=>'请使用GET方式'];
    }

    public function actionGetArticleCategoryByArticle()//15.根据文章获取文章分类API
    {
        if(\Yii::$app->request->isGet){
            $article_id = \Yii::$app->request->get('article_id');//获得该文章
            $article = Article::findOne(['id'=>$article_id]);
            $articles = Article_Category::findOne(['id'=>$article->article_category_id]);
            return ['status'=>1,'error'=>'','data'=>$articles];
        }
        return ['status'=>-1,'error'=>1,'data'=>'请使用GET方式'];
    }

    public function actionAddCart()//16.添加商品到购物车API
    {
        if(\Yii::$app->request->isPost){
            //1.接受到goods_id和amount
            $goods_id = \Yii::$app->request->post('goods_id');
            $amount = \Yii::$app->request->post('amount');
            //return $goods_id;
            //2.查询商品是否存在
            if(!Goods::findOne(['id'=>$goods_id])){
                return ['status'=>-1,'error'=>1,'data'=>'商品id错误'];
            }
            //3.判断
            //用户是否登录
            if(\Yii::$app->user->isGuest){
                //3.1创建新的cookie对象
                $cookies = \Yii::$app->request->cookies;//REQUEST cookie
                //3.2先获取cookie中已经有的数据$cart
                $old_cookies = $cookies->get('cart');

                if($old_cookies == null){
                    //cookie中没有购物车数据
                    $cart =[];
                }else{
                    $cart = unserialize($old_cookies->value);
                }
                //3.3保存前检查cookie中是否已经有此商品,有就更新，没有添加
                if(key_exists($goods_id,$cart)){
                    $cart[$goods_id] += $amount;//更新相加
                }else{
                    $cart[$goods_id] = $amount;//新增
                }
                //3.4添加到cookie
                $cookie = \Yii::$app->response->cookies;//response Cookies
                $data = new Cookie(['name'=>'cart', 'value'=>serialize($cart)]);
                $cookie->add($data);
            }else{
                //登录情况，数据保存到数据表、
                $cart = new Cart();
                $cart->user_id = \Yii::$app->user->id;
                $cart->goods_id = $goods_id ;
                $cart->amount = $amount ;
                $cart->save();
            }
            //跳转到购物车
            return ['status'=>1,'error'=>'','data'=>$cart];
        }else{
            return ['status'=>1,'error'=>'','data'=>'请使用POST方式'];
        }
    }

    public function actionEditCart()//17.修改购物车商品API
    {
        if(\Yii::$app->request->isPost){
            //1.接受到goods_id和amount
            $goods_id = \Yii::$app->request->post('goods_id');
            $amount = \Yii::$app->request->post('amount');
            //2.查询商品是否存在
            if(!Goods::findOne(['id'=>$goods_id])){
                return ['status'=>-1,'error'=>1,'data'=>'商品不存在'];
            }
            //3.判断用户是否登录
            if(\Yii::$app->user->isGuest){
                //3.1创建新的cookie对象
                $cookies = \Yii::$app->request->cookies;//REQUEST cookie
                //3.2先获取cookie中已经有的数据$cart
                $old_cookies = $cookies->get('cart');
                if($old_cookies == null){
                    //cookie中没有购物车数据
                    $cart =[];
                }else{
                    //cookie有数据,获取原来的cookie数据
                    $cart = unserialize($old_cookies->value);
                }

                //3.3更新操作，判断$amount的值，为0删除，不为0更新
                $new_cookie = \Yii::$app->response->cookies;//response Cookies可以读写
                if(!$amount == 0){
                    $cart[$goods_id] = $amount;//更新
                }else{
                    if(key_exists($goods_id,$cart)) unset($cart[$goods_id]);//商品存在，amount为0删除
                }
                //3.4修改/删除完成，添加到新cookie
                $data = new Cookie(['name'=>'cart', 'value'=>serialize($cart)]);
                $new_cookie->add($data);
            }else{
                //登录情况，修改删除数据表数据、
                $goods = Cart::findOne(['goods_id'=>$goods_id]);
                if(!$goods){
                    return ['status'=>-1,'error'=>1,'data'=>'商品不存在'];
                }
                if($amount){//修改
                    $goods->amount = $amount;
                    $goods->save();
                }else{//删除
                    $goods->delete();
                }
            }
            return ['status'=>1,'error'=>'','data'=>'OK'];

        }else{
            return ['status'=>-1,'error'=>1,'data'=>'请使用POST方式'];
        }
    }

    public function actionCleanCart()//18.清空购物车API
    {

        if(\Yii::$app->request->isGet){
            //判断用户是否登录
            if(\Yii::$app->user->isGuest){
                //清除cookie
                \Yii::$app->response->cookies->remove('cart');
                return ['status'=>1,'error'=>'','data'=>'清空成功'];
            }
            //清除数据库
            $user_id = \Yii::$app->user->id;
            $carts = Cart::findAll(['user_id'=>$user_id]);
            foreach ($carts as $cart){
                $cart->delete();
            }
            //清除cookie
            \Yii::$app->response->cookies->remove('cart');
            return ['status'=>1,'error'=>'','data'=>'清空成功'];
        }else{
            return ['status'=>-1,'error'=>1,'data'=>'请使用get方式'];
        }
    }

    public function actionGetCart()//19.获取购物车所有商品API
    {
        if(\Yii::$app->request->isGet){
            $user_id = \Yii::$app->user->id;
            //获得购物车数据
            $carts = Cart::find()->asArray()->where(['user_id'=>$user_id])->all();
            //查询商品信息
            $goods = [];
            foreach ($carts as $cart){
                $good = Goods::findOne( ['id'=>$cart['goods_id']])->attributes;
                $good['amount'] = $cart['goods_id'];
                //处理商品分类和品牌
                $good['brand'] = Brand::findOne(['id'=>$good['brand_id']])->name;
                $good['category'] = Goods_Category::findOne(['id'=>$good['goods_category_id']])->name;
                unset($good['brand_id']);
                unset($good['goods_category_id']);
                //得到商品信息
                $goods[] = $good;
            }
            return ['status'=>1,'error'=>'','data'=>$goods];
        }else{
            return ['status'=>-1,'error'=>1,'data'=>'请使用GET方式'];
        }
    }

    public function actionGetPayMethod()//20.获取支付方式API
    {
        if(\Yii::$app->request->isGet){
            $order_id = \Yii::$app->request->get('order_id');//获取订单id
            //判断登录用户id和订单id是否匹配符
            if(!Order::find()->where(['id'=>$order_id])->andWhere(['member_id'=>\Yii::$app->user->id])->one() ){
                return ['status'=>-1,'error'=>1,'data'=>'订单号错误'];
            }
            //根据用户id和订单id查找支付方式
            $paymethod = Order::find()->where(['id'=>$order_id])->andWhere(['member_id'=>\Yii::$app->user->id])->one()->payment_name;
            return ['status'=>1,'error'=>'','data'=>$paymethod];
        }else{
            return ['status'=>-1,'error'=>1,'data'=>'请使用GET方式'];
        }
    }

    public function actionGetDeliveryMethod()//21.获取送货方式API
    {
        if(\Yii::$app->request->isGet){
            $order_id = \Yii::$app->request->get('order_id');//获取订单id
            //判断登录用户id和订单id是否匹配符
            if(!Order::find()->where(['id'=>$order_id])->andWhere(['member_id'=>\Yii::$app->user->id])->one() ){
                return ['status'=>-1,'error'=>1,'data'=>'订单号错误'];
            }
            //根据用户id和订单id查找支付方式
            $deliverymethod = Order::find()->where(['id'=>$order_id])->andWhere(['member_id'=>\Yii::$app->user->id])->one()->delivery_name;
            return ['status'=>1,'error'=>'','data'=>$deliverymethod];
        }else{
            return ['status'=>-1,'error'=>1,'data'=>'请使用GET方式'];
        }
    }

    public function actionOrder()//22.提交订单API
    {
        if(\Yii::$app->request->isPost){
            //接收参数
            $address_id = \Yii::$app->request->post('address_id');//收货地址
            $delivery_id = \Yii::$app->request->post('delivery_id');//送货方式
            $payment_id = \Yii::$app->request->post('payment_id');//支付方式
            $total_money = \Yii::$app->request->post('total_money');//订单总金额

            //订单保存数据库
            $model = new Order();
            $model->member_id = \Yii::$app->user->id;
            //地址信息查询保存
            $address = Address::findOne(['id'=>$address_id]);
            $model->name = $address->name;
            $model->province = $address->province;
            $model->city = $address->city;
            $model->area = $address->area;
            $model->address = $address->detail;
            $model->tel = $address->tel;
            //配送方式
            foreach (Order::$delivery_method as $delivery){
                if($delivery['id'] == $delivery_id){
                    $model->delivery_id = $delivery['id'];
                    $model->delivery_name = $delivery['method'];
                    $model->delivery_price = $delivery['price'];
                }
            }
            //支付方式
            foreach (Order::$payment_method as $payment){
                if($payment['id'] == $payment_id){
                    $model->payment_id = $payment['id'];
                    $model->payment_name = $payment['method'];
                }
            }
            //订单总金额
            $model->total = $total_money;
            //订单状态
            $model->status = 1;//（0已取消1待付款2待发货3待收货4完成）
            //订单号trade
            $model->trade_no = date('md').uniqid();
            //创建时间
            $model->create_time = time();
            //写操作，事物开启
            $tansaction = \Yii::$app->db->beginTransaction();
            try{
                $model->save();

                //3.保存商品订单详情order_goods表
                //根据用户ID，查询购物车数据表
                $carts = Cart::find()->asArray()->where(['user_id'=>\Yii::$app->user->id])->all();

                if($carts){//判断有没有商品信息
                    foreach($carts as $cart){
                        //cart中的商品信息保存到ordergoods
                        $ordergoods = new OrderGoods();
                        //查询到一个商品信息,保存指定数据到order_goods表
                        $good = Goods::findOne(['id'=>$cart['goods_id']]);
                        if($good==null){
                            throw new Exception('商品不存在');
                        }
                        // var_dump($good->stock);exit;
                        if($good->stock < $cart['amount']){
                            throw new Exception('库存不足');
                        }
                        $ordergoods->order_id = $model->oldAttributes['id'];
                        $ordergoods->goods_id = $cart['goods_id'];
                        $ordergoods->goods_name = $good->name;
                        $ordergoods->logo = $good->logo;
                        $ordergoods->price = $good->shop_price;
                        //商品的数量和金额
                        $ordergoods->amount = $cart['amount'];
                        $ordergoods->total =($cart['amount']-0)*($good->shop_price-0);
                        //扣库存
                        $good->stock -= $cart['amount'];
                        //商品库存更新
                        $good->save();
                        //保存一条商品数据
                        $ordergoods->save();
                    }
                }
                //操作完成，清除cookie,删除cart数据表内容，跳转
                \Yii::$app->response->cookies->remove('cart');
                $carts = Cart::find()->where(['user_id'=>\Yii::$app->user->id])->all();
                foreach ($carts as $cart){
                    $cart->delete();
                }
                //提交事物
                $tansaction->commit();
                return ['status'=>1,'error'=>'','data'=>$model];//添加成功，返回订单信息
            }catch (Exception $exception){
                //回滚
                $tansaction->rollBack();
                return ['status'=>-1,'error'=>1,'data'=>'商品库存不足'];
            }
        }else{
            return ['status'=>-1,'error'=>1,'data'=>'请使用post提交'];
        }
    }

    public function actions()//23.验证码API
    {
        return [
            'captcha' => [
                'class' => 'yii\captcha\CaptchaAction',
                'fixedVerifyCode' => YII_ENV_TEST ? 'testme' : null,
                'minLength' => 4,//验证码最小长度
                'maxLength'=>4,//最大长度
            ],
        ];
    }

    public function actionGetOrderList()//24.根据用户id获取订单列表并分页
    {
        if(\Yii::$app->request->isGet){
            //1.先根据用户ID找到所有订单
            $orders = Order::find()->where(['member_id'=>\Yii::$app->user->id])->all();
            //2.更具订单id找到所有商品
            $count = 0;
            $all_goods=[];//保存所有的商品
            foreach ($orders as $order) {
                $query = OrderGoods::find()->where(['order_id' => $order->id]);
                $count += $query->count();//总条数
                foreach ($query->asArray()->all() as $goods){
                    $goods['trade_no'] = $order->trade_no;//订单号
                    $goods['name'] = $order->name;//收货人
                    $goods['payment_name'] = $order->payment_name;//付款方式
                    $goods['create_time'] = $order->create_time;//订单时间
                    $goods['status'] = $order->status;//订单状态
                    $all_goods[] = $goods;//将goods逐条放到ID中,/后面分页使用
                }
            }

            //<!--（0已取消1待付款2待发货3待收货4完成）-->
            //状态计数
            $status['fakuan']=$status['fahuo']=$status['shouhuo']= 0;
            if($all_goods){
                foreach ($all_goods as $k){
                    if($k['status']==1){
                        $status['fakuan'] +=1;
                    }elseif($k['status']==2){
                        $status['fahuo']+=1;
                    }elseif($k['status']==3){
                        $status['shouhuo']+=1;
                    }
                }
            }

            //3.分页
            $page = \Yii::$app->request->get('page',1);//接受页码
            $page = $page<1 ? 1 : $page;//当前页码
            $pagesize = \Yii::$app->request->get('pagesize',3);//每页显示4条
            $pagesize = $pagesize<4 ? 4 : $pagesize;//最少显示4条
            $all_page = ceil($count/$pagesize);//获取总页数

            $j = ($page-1)*$pagesize;//开始下标
            $max = $j+$pagesize;//每页显示的最后一条的下标
            if($j+$pagesize>$count){
                $max = $count;
            }
            $goods =[];//保存商品数据
            for($i=$j;$i<$max;$i++){
                $goods[]=$all_goods[$i];
            }
            //返回数据
            return ['total'=>$count, 'page'=>$page, 'all_page'=>$all_page, 'goods'=>$goods,'status'=>$status ];
        }else{
            return ['status'=>-1,'error'=>1,'data'=>'请使用GET方式'];
        }
    }

    public function actionCancelOrder()//25.取消订单API
    {
        if(\Yii::$app->request->isGet){
            //获取当前登录用户id
            $member_id = \Yii::$app->user->id;
            //接受订单id
            $order_id = \Yii::$app->request->get('order_id');
            if(!$order_id){
                return ['status'=>-1,'error'=>1,'data'=>'参数错误'];
            }
            if(!Order::findOne(['member_id'=>$member_id,'id'=>$order_id])){
                return ['status'=>-1,'error'=>1,'data'=>'订单不存在'];
            }
            $order = Order::findOne(['member_id'=>$member_id,'id'=>$order_id]);
            $order->delete();//删除订单
            if(!OrderGoods::find()->where(['order_id'=>$order->id])->all()){
                return ['status'=>-1,'error'=>1,'data'=>'订单商品为空'];
            }
            $goods = OrderGoods::find()->where(['order_id'=>$order->id])->all();
            foreach($goods as $good){
                $good->delete();//删除订单商品表数据
            }
            return ['status'=>1,'error'=>'','data'=>'取消成功'];
        }else{
            return ['status'=>-1,'error'=>1,'data'=>'请使用GET方式'];
        }
    }

    public function actionUpload(){
        if(\Yii::$app->request->isPost){
            $imgfile = UploadedFile::getInstanceByName('img');
            if($imgfile){
                $filename = '/images/'.uniqid().$imgfile->extension;
                $result = $imgfile->saveAs(\Yii::getAlias('@webroot').$filename,0);
                if($result){
                    return ['status'=>1,'error'=>'','data'=>$filename];
                }
                return ['status'=>-1,'error'=>1,'data'=>$imgfile->error];
            }
           return ['status'=>-1,'error'=>1,'data'=>'没有文件上传'];
        }else{
            return ['status'=>-1,'error'=>1,'data'=>'请使用post提交'];
        }
    }

    public function actionSendMsg(){

    }

    //高级API
    //验证码
    //文件上传
    //分页
    //发送短信
}